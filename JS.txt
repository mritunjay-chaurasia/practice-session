1- Types of Data types
    There are two types of Data Types
    a- Primitive Data Types:- Primitive types are immutable (cannot be changed)
        Number, Boolean, String, Undefined, Null, BigInt
    b- Non Primitive Data Types:- These are objects and stored by reference.
        Object, Array,Function

2- Difference b/w setTimeout and setInterval
    a- setTimeout: Runs once after a given delay.
                setTimeout(()=>{
                   console.log(Executes the callback only one time.)
                },1000)
    b- setInterval: Runs repeatedly after a given delay.  
                setInterval(()=>{
                    console.log(Executes the callback repeatedly)
                },2000) 

3- Make a function that behave same as setInterval
   we can use Recursive function
    function runIntervalFun(callback, delay){
        function loop(){
            callback()
            setTimeout(loop,delay)
        }
        setTimeout(loop,delay)
    }

    runIntervalFun(()=>{console.log("Now Time Start")},1000)

4- What is Debouncing?    
    Debouncing is a performance optimization technique in JavaScript that ensures a function is not called too frequently.
    or prevents unnecessary APIs Call and reduce load time.
    a- Imagine ringing a doorbell:
    If you press it repeatedly, the bell should only ring once after you stop pressing for a short moment.
    That’s debouncing.
    b- Common use cases
    Search input (wait until user stops typing to send API request)
    Window resize event (don’t recalculate layout on every pixel change, wait until resize stops)
    Button clicks (prevent double-submit)
    const log = debounce((text) => {
    console.log("Search:", text);
    }, 500);
    // Typing simulation
    log("H");   // ignored
    log("He");  // ignored
    log("Hel"); // ignored
    log("Hell"); // ignored
    log("Hello"); // only this runs after 500ms pause

5- Difference b/w filter() and find()
    filter()
    Return all elements that match a conditions
    Always return an array(could be empty if no match conditions)
    find()
    Returns the first element that matches a condition.
    Returns a single value (or undefined if no match).

6- Proxy in JavaScript :
A Proxy is an object that wraps another object and allows you to intercept and customize fundamental operations on that object — like getting a property, setting a value, deleting a key, etc.

const user = { name: "Mritunjay", age: 25 };
const dataProxy = new Proxy(user,{
    get(target,property){
        return target[property]
    }
    set(tareget,property,value){
        return tareget[property] = value
    }
})

7- Hoisting: Hoisting is default behaviour of js where variable or function declearation are moved on top of their containg scope during compile


 